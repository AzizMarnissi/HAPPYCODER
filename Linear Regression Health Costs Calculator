import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('path/to/your/healthcare_costs.csv')

# Display the first few rows of the dataset
data.head()
# Identify categorical and numerical columns
categorical_cols = ['sex', 'smoker', 'region']  # Update with actual categorical columns from your dataset
numerical_cols = ['age', 'bmi', 'children']  # Update with actual numerical columns

# Define features and target variable
X = data.drop('expenses', axis=1)
y = data['expenses']

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a column transformer for preprocessing
preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(), categorical_cols)
    ],
    remainder='passthrough'
)

# Create a preprocessing and model pipeline
pipeline = Pipeline(steps=[('preprocessor', preprocessor),
                             ('model', LinearRegression())])
# Train the model
pipeline.fit(X_train, y_train)
# Make predictions
y_pred = pipeline.predict(X_test)

# Calculate Mean Absolute Error
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# Check if the MAE is under 3500
if mae < 3500:
    print("Model performance is acceptable.")
else:
    print("Model performance needs improvement.")
# Plotting the results
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Expenses')
plt.ylabel('Predicted Expenses')
plt.title('Actual vs Predicted Healthcare Expenses')
plt.plot([0, max(y_test)], [0, max(y_test)], color='red', linestyle='--')  # 45-degree line
plt.show()
